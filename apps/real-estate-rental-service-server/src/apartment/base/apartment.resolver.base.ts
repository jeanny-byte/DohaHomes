/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Apartment } from "./Apartment";
import { ApartmentCountArgs } from "./ApartmentCountArgs";
import { ApartmentFindManyArgs } from "./ApartmentFindManyArgs";
import { ApartmentFindUniqueArgs } from "./ApartmentFindUniqueArgs";
import { CreateApartmentArgs } from "./CreateApartmentArgs";
import { UpdateApartmentArgs } from "./UpdateApartmentArgs";
import { DeleteApartmentArgs } from "./DeleteApartmentArgs";
import { ApartmentService } from "../apartment.service";
@graphql.Resolver(() => Apartment)
export class ApartmentResolverBase {
  constructor(protected readonly service: ApartmentService) {}

  async _apartmentsMeta(
    @graphql.Args() args: ApartmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Apartment])
  async apartments(
    @graphql.Args() args: ApartmentFindManyArgs
  ): Promise<Apartment[]> {
    return this.service.apartments(args);
  }

  @graphql.Query(() => Apartment, { nullable: true })
  async apartment(
    @graphql.Args() args: ApartmentFindUniqueArgs
  ): Promise<Apartment | null> {
    const result = await this.service.apartment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Apartment)
  async createApartment(
    @graphql.Args() args: CreateApartmentArgs
  ): Promise<Apartment> {
    return await this.service.createApartment({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Apartment)
  async updateApartment(
    @graphql.Args() args: UpdateApartmentArgs
  ): Promise<Apartment | null> {
    try {
      return await this.service.updateApartment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Apartment)
  async deleteApartment(
    @graphql.Args() args: DeleteApartmentArgs
  ): Promise<Apartment | null> {
    try {
      return await this.service.deleteApartment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
