/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApartmentService } from "../apartment.service";
import { ApartmentCreateInput } from "./ApartmentCreateInput";
import { Apartment } from "./Apartment";
import { ApartmentFindManyArgs } from "./ApartmentFindManyArgs";
import { ApartmentWhereUniqueInput } from "./ApartmentWhereUniqueInput";
import { ApartmentUpdateInput } from "./ApartmentUpdateInput";

export class ApartmentControllerBase {
  constructor(protected readonly service: ApartmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Apartment })
  async createApartment(
    @common.Body() data: ApartmentCreateInput
  ): Promise<Apartment> {
    return await this.service.createApartment({
      data: data,
      select: {
        available: true,
        bedrooms: true,
        companyOrAgent: true,
        createdAt: true,
        description: true,
        furnishing: true,
        id: true,
        location: true,
        owner: true,
        price: true,
        propertyFeatures: true,
        propertyType: true,
        rentOrSale: true,
        residentialOrCommercial: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Apartment] })
  @ApiNestedQuery(ApartmentFindManyArgs)
  async apartments(@common.Req() request: Request): Promise<Apartment[]> {
    const args = plainToClass(ApartmentFindManyArgs, request.query);
    return this.service.apartments({
      ...args,
      select: {
        available: true,
        bedrooms: true,
        companyOrAgent: true,
        createdAt: true,
        description: true,
        furnishing: true,
        id: true,
        location: true,
        owner: true,
        price: true,
        propertyFeatures: true,
        propertyType: true,
        rentOrSale: true,
        residentialOrCommercial: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Apartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async apartment(
    @common.Param() params: ApartmentWhereUniqueInput
  ): Promise<Apartment | null> {
    const result = await this.service.apartment({
      where: params,
      select: {
        available: true,
        bedrooms: true,
        companyOrAgent: true,
        createdAt: true,
        description: true,
        furnishing: true,
        id: true,
        location: true,
        owner: true,
        price: true,
        propertyFeatures: true,
        propertyType: true,
        rentOrSale: true,
        residentialOrCommercial: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Apartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApartment(
    @common.Param() params: ApartmentWhereUniqueInput,
    @common.Body() data: ApartmentUpdateInput
  ): Promise<Apartment | null> {
    try {
      return await this.service.updateApartment({
        where: params,
        data: data,
        select: {
          available: true,
          bedrooms: true,
          companyOrAgent: true,
          createdAt: true,
          description: true,
          furnishing: true,
          id: true,
          location: true,
          owner: true,
          price: true,
          propertyFeatures: true,
          propertyType: true,
          rentOrSale: true,
          residentialOrCommercial: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Apartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApartment(
    @common.Param() params: ApartmentWhereUniqueInput
  ): Promise<Apartment | null> {
    try {
      return await this.service.deleteApartment({
        where: params,
        select: {
          available: true,
          bedrooms: true,
          companyOrAgent: true,
          createdAt: true,
          description: true,
          furnishing: true,
          id: true,
          location: true,
          owner: true,
          price: true,
          propertyFeatures: true,
          propertyType: true,
          rentOrSale: true,
          residentialOrCommercial: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
