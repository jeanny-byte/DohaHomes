/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Apartment as PrismaApartment } from "@prisma/client";

export class ApartmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApartmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.apartment.count(args);
  }

  async apartments(
    args: Prisma.ApartmentFindManyArgs
  ): Promise<PrismaApartment[]> {
    return this.prisma.apartment.findMany(args);
  }
  async apartment(
    args: Prisma.ApartmentFindUniqueArgs
  ): Promise<PrismaApartment | null> {
    return this.prisma.apartment.findUnique(args);
  }
  async createApartment(
    args: Prisma.ApartmentCreateArgs
  ): Promise<PrismaApartment> {
    return this.prisma.apartment.create(args);
  }
  async updateApartment(
    args: Prisma.ApartmentUpdateArgs
  ): Promise<PrismaApartment> {
    return this.prisma.apartment.update(args);
  }
  async deleteApartment(
    args: Prisma.ApartmentDeleteArgs
  ): Promise<PrismaApartment> {
    return this.prisma.apartment.delete(args);
  }
}
